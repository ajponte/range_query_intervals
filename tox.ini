# tox.ini
# This configuration shows how to use tox with a Poetry-managed project
# by letting tox manage the environment.
[tox]
min_version = 4.0
env_list = py313, pytest

# ---
# This is the base configuration for all test environments.
[testenv]
description = Setup tox project
# Tox will automatically use the pyproject.toml build backend (poetry)
# to install the package in an isolated way.
isolated_build = True

# We need to tell tox where to find our dependencies from pyproject.toml
# Tox can read the dependencies directly.
# The `.[test]` syntax tells tox to install the main package and the `test` extra.
# You need to define the test dependencies in your pyproject.toml as well.
# For example: [tool.poetry.group.test.dependencies]
;deps =
;    # The build system itself (poetry-core) will be handled automatically by tox.
;    poetry
# The command to execute after dependencies are installed.
;commands =
;    pytest

# ---
# This section defines the specific environment for Python 3.13 testing.
[testenv:py313]
# Use the Python 3.13 interpreter.
base_python = python3.13


[testenv:pytest]
description = Run pytests for the project
deps =
    pytest
    # There should be a way to install this from pyproject.toml
    sqlalchemy
commands =
    pytest

[testenv:lint]
description = run linter
deps =
    pylint
commands =
    pylint --rc-file=.pylintrc
