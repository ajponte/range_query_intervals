# tox.ini
# This configuration shows how to use tox with a Poetry-managed project
# by letting tox manage the environment.
[tox]
min_version = 4.0
env_list = py313, pytest, lint, format

# ---
# This is the base configuration for all test environments.
[testenv]
description = Setup tox project
# Tox will automatically use the pyproject.toml build backend (poetry)
# to install the package in an isolated way.
isolated_build = True
# This is the key change. We tell tox to install the project itself.
# This makes all the dependencies from pyproject.toml available to the env.
deps =
    -e .

# ---
# This section defines the specific environment for Python 3.13 testing.
[testenv:py313]
# Use the Python 3.13 interpreter.
base_python = python3.13

[testenv:pytest]
description = Run pytests for the project
# This environment now inherits deps from the base `[testenv]`.
# `pytest` is installed from the base `[testenv]` and project dependencies.
# The `pytest` dependency should be defined in `pyproject.toml`
# under `[tool.poetry.group.test.dependencies]`.
commands =
    pytest
# This is the fix: we explicitly allow the `pytest` command to run.
allowlist_externals =
    pytest

[testenv:lint]
description = run linter
# This environment now inherits deps from the base `[testenv]`.
# `pylint` is installed from the base `[testenv]`.
# The `pylint` dependency should be defined in `pyproject.toml`
# under `[tool.poetry.group.test.dependencies]`.
deps =
    pylint
commands =
    pylint --rc-file=.pylintrc intervals/
allowlist_externals =
    pylint

[testenv:format]
description = format with black
# This environment now inherits deps from the base `[testenv]`.
# `black` is installed from the base `[testenv]`.
# The `black` dependency should be defined in `pyproject.toml`
# under `[tool.poetry.group.test.dependencies]`.
deps =
    black
commands =
    black intervals --check --diff
allowlist_externals =
    black
